{"remainingRequest":"/opt/lampp/htdocs/intellect/front/node_modules/vue-loader/lib/index.js??vue-loader-options!/opt/lampp/htdocs/intellect/front/src/modules/editor/pages/Editor.vue?vue&type=style&index=0&id=16f7fec9&lang=scss&scoped=true&","dependencies":[{"path":"/opt/lampp/htdocs/intellect/front/src/modules/editor/pages/Editor.vue","mtime":1584735012183},{"path":"/opt/lampp/htdocs/intellect/front/node_modules/css-loader/dist/cjs.js","mtime":1578848125980},{"path":"/opt/lampp/htdocs/intellect/front/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1584734932632},{"path":"/opt/lampp/htdocs/intellect/front/node_modules/postcss-loader/src/index.js","mtime":1576704845266},{"path":"/opt/lampp/htdocs/intellect/front/node_modules/sass-loader/dist/cjs.js","mtime":1579280248210},{"path":"/opt/lampp/htdocs/intellect/front/node_modules/cache-loader/dist/cjs.js","mtime":1578848123391},{"path":"/opt/lampp/htdocs/intellect/front/node_modules/vue-loader/lib/index.js","mtime":1584734932632}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmV4YW1wbGUgewogIGRpc3BsYXk6IGZsZXg7CiAgaGVpZ2h0OiAyMHJlbTsKICAuZWRpdG9yLAogIC5vdXRwdXQgewogICAgd2lkdGg6IDUwJTsKICAgIGhlaWdodDogMTAwJTsKICB9CiAgJHRvb2xiYXItaGVpZ2h0OiA0MnB4OwogIC5lZGl0b3IgewogICAgcGFkZGluZy1ib3R0b206ICR0b29sYmFyLWhlaWdodDsKICB9CiAgLm91dHB1dCB7CiAgICBib3JkZXI6IG5vbmU7CiAgICAudGl0bGUgewogICAgICBoZWlnaHQ6IDBweDsKICAgICAgbGluZS1oZWlnaHQ6IDBweDsKICAgICAgcGFkZGluZy1sZWZ0OiAxNXB4OwogICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2NjYzsKICAgIH0KICAgID4gY29kZSB7CiAgICAgIHdpZHRoOiAxMDAlOwogICAgICBtYXJnaW46IDA7CiAgICAgIHBhZGRpbmc6IDFyZW07CiAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7CiAgICAgIGJvcmRlci10b3A6IG5vbmU7CiAgICAgIGJvcmRlci1sZWZ0OiBub25lOwogICAgICBib3JkZXItcmFkaXVzOiAwOwogICAgICBoZWlnaHQ6IDEwMCU7CiAgICAgIG92ZXJmbG93LXk6IGF1dG87CiAgICB9CiAgfQp9Cg=="},{"version":3,"sources":["Editor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Editor.vue","sourceRoot":"src/modules/editor/pages","sourcesContent":["<template>\n<div>\n    <Main>\n        <template v-slot:mainpage>\n             <div class=\"output ql-snow\">\n      <div class=\"title\">Output</div>\n      <div class=\"ql-editor\" v-html=\"this.content\"></div>\n    </div>\n               \n               <quill-editor\n      class=\"editor\"\n      v-model=\"content\"\n      :options=\"editorOption\"\n    />\n\n        </template>\n    </Main>\n</div>\n</template>\n\n<script>\n\n import { Quill } from 'vue-quill-editor'\n  import { container, ImageExtend, QuillWatch } from 'quill-image-extend-module'\n\n  import quillEmoji from 'quill-emoji'\n  import 'quill-emoji/dist/quill-emoji.css'\n\n  const testImageAPI = 'https://github.surmon.me/images/'\n  const testImageUrl = testImageAPI + 'background.jpg'\n\n    Quill.register('modules/ImageExtend', ImageExtend)\n\nimport Main from '@/views/layouts/Main'\nexport default {\n    name: \"Editor\",\n    data() {\n        return {\n            content: '',\n      editorOption: {\n          theme: 'snow',\n          modules: {\n            \"emoji-toolbar\": true,\n            \"emoji-shortname\": true,\n            toolbar: {\n              container: [\n                ['link', 'image', 'emoji']\n              ],\n              handlers: {\n                'image': function () {\n                  QuillWatch.emit(this.quill.id)\n                }\n              }\n            },\n            ImageExtend: {\n              loading: true,\n              name: 'img',\n              action: 'https://github.surmon.me/images/',\n              response: () => {\n                return testImageUrl\n              }\n            }\n          }\n        }\n        \n        }\n    },\n     methods: {\n      onEditorBlur(quill) {\n        console.log('editor blur!', quill)\n      },\n      onEditorFocus(quill) {\n        console.log('editor focus!', quill)\n      },\n      onEditorReady(quill) {\n        console.log('editor ready!', quill)\n      },\n      onEditorChange({ quill, html, text }) {\n        console.log('editor change!', quill, html, text)\n        this.content = html\n      }\n    },\n    computed: {\n      editor() {\n        return this.$refs.myQuillEditor.quill\n      }\n    },\n    mounted() {\n      console.log('this is current quill instance object', this.editor)\n    },\n    components: {\n        Main,\n    \n    },\n}\n</script>\n\n\n<style lang=\"scss\" scoped>\n  .example {\n    display: flex;\n    height: 20rem;\n    .editor,\n    .output {\n      width: 50%;\n      height: 100%;\n    }\n    $toolbar-height: 42px;\n    .editor {\n      padding-bottom: $toolbar-height;\n    }\n    .output {\n      border: none;\n      .title {\n        height: 0px;\n        line-height: 0px;\n        padding-left: 15px;\n        border-bottom: 1px solid #ccc;\n      }\n      > code {\n        width: 100%;\n        margin: 0;\n        padding: 1rem;\n        border: 1px solid #ccc;\n        border-top: none;\n        border-left: none;\n        border-radius: 0;\n        height: 100%;\n        overflow-y: auto;\n      }\n    }\n  }\n</style>\n\n"]}]}